{"version":3,"file":"static/js/501.cd751d9e.chunk.js","mappings":"wOAKMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJE,MAAM,iDACNC,WACHC,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,2CACPF,aAGCG,EAAY,SAAHC,GAAkB,IAAZC,EAAID,EAAJC,KACnB,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAACF,KAAMA,EAAMG,OAAQ,SAAAC,GAAO,OAAIH,EAAAA,EAAAA,KAAA,KAAAI,SAAID,GAAY,GACtE,EAEaE,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,cAAe,CAAEhB,MAAO,GAAIE,SAAU,IACtCe,SARiB,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UAC9BP,GAASQ,EAAAA,EAAAA,IAAMH,IACfE,GACF,EAMIE,iBAAkBzB,EAAOc,UAEzBY,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,aAAa,MAAKd,SAAA,EACtBY,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,EACEJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,WACNJ,EAAAA,EAAAA,KAACmB,EAAAA,GAAK,CAACC,KAAK,QAAQrB,KAAK,WACzBC,EAAAA,EAAAA,KAACH,EAAS,CAACE,KAAK,cAGlBiB,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,EACEJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,cACNJ,EAAAA,EAAAA,KAACmB,EAAAA,GAAK,CAACC,KAAK,WAAWrB,KAAK,cAC5BC,EAAAA,EAAAA,KAACH,EAAS,CAACE,KAAK,iBAGlBC,EAAAA,EAAAA,KAAA,UAAQoB,KAAK,SAAQhB,SAAC,eAI9B,E,UCrCA,EAXkB,WAChB,OACEY,EAAAA,EAAAA,MAAA,OAAAZ,SAAA,EACEJ,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CAAAjB,UACLJ,EAAAA,EAAAA,KAAA,SAAAI,SAAO,aAETJ,EAAAA,EAAAA,KAACK,EAAS,MAGhB,C","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Enter valid email. For example user@gmail.com')\n    .required(),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters.')\n    .required(),\n});\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <p>{message}</p>} />;\n};\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form autoComplete=\"off\">\n        <label>\n          <span>Email</span>\n          <Field type=\"email\" name=\"email\" />\n          <FormError name=\"email\" />\n        </label>\n\n        <label>\n          <span>Password</span>\n          <Field type=\"password\" name=\"password\" />\n          <FormError name=\"password\" />\n        </label>\n\n        <button type=\"submit\">Log In</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Helmet } from 'react-helmet';\n\nconst LoginPage = () => {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["schema","yup","shape","email","required","password","min","FormError","_ref","name","_jsx","ErrorMessage","render","message","children","LoginForm","dispatch","useDispatch","Formik","initialValues","onSubmit","values","_ref2","resetForm","logIn","validationSchema","_jsxs","Form","autoComplete","Field","type","Helmet"],"sourceRoot":""}