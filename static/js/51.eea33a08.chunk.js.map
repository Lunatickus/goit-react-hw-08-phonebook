{"version":3,"file":"static/js/51.eea33a08.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/App.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from \"styled-components\"\n\nexport const StyledAppContainer = styled.div`\n    padding-left: 40px;\n`","import styled from \"styled-components\";\nimport { Form, Field } from \"formik\";\n\nexport const StyledFormContacts = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n    align-items: start;\n    border: 1px solid black;\n    width: 400px;\n    padding: 10px;\n`;\n\nexport const StyledInput = styled(Field)`\n    width: 170px;\n`;\n\nexport const StyledFromLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: 18px;\n    font-weight: 600;\n`;\n\nexport const StyledFormButton = styled.button`\n    background-color: transparent;\n    border-radius: 5px;\n    border: 1px solid gray;\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n        background-color: aqua;\n    }\n\n`;\n\nexport const StyledErrorText = styled.p`\n    color: red;\n    font-size: 14px;\n    margin: 0;\n`","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport {\n  StyledFormContacts,\n  StyledFormButton,\n  StyledFromLabel,\n  StyledErrorText,\n  StyledInput,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/contactOperations';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .matches(\n      /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <StyledErrorText>{message}</StyledErrorText>}\n    />\n  );\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    if (contacts.some(c => name === c.name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <StyledFormContacts autoComplete=\"off\">\n        <StyledFromLabel>\n          <span>Name</span>\n          <StyledInput type=\"text\" name=\"name\" />\n          <FormError name=\"name\" />\n        </StyledFromLabel>\n\n        <StyledFromLabel>\n          <span>Number</span>\n          <StyledInput type=\"tel\" name=\"number\" />\n          <FormError name=\"number\" />\n        </StyledFromLabel>\n\n        <StyledFormButton type=\"submit\">Add contact</StyledFormButton>\n      </StyledFormContacts>\n    </Formik>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledFilterLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    align-items: start;\n    gap: 5px;\n    font-size: 18px;\n    font-weight: 600;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { StyledFilterLabel } from './Filter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <StyledFilterLabel>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        title=\"Find contacts by name\"\n        onChange={e => dispatch(setFilter(e.target.value))}\n        value={filter}\n      />\n    </StyledFilterLabel>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledContactListItem = styled.li`\n    font-size: 18px;\n`;\n\nexport const StyledDeleteButton = styled.button`\n    background-color: transparent;\n    border-radius: 5px;\n    border: 1px solid gray;\n    cursor: pointer;\n    margin-left: 10px;\n\n    &:hover,\n    &:focus {\n        background-color: aqua;\n    }\n\n`","import {\n  StyledContactListItem,\n  StyledDeleteButton,\n} from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contact, handleDelete }) => {\n  return (\n    <StyledContactListItem>\n      {contact.name}: {contact.phone}\n      <StyledDeleteButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </StyledDeleteButton>\n    </StyledContactListItem>\n  );\n};\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/contactOperations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul>\n      {contacts.map(contact => {\n        return (\n          <ContactListItem\n            contact={contact}\n            handleDelete={() => dispatch(deleteContact(contact.id))}\n            key={contact.id}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n","import {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contactOperations';\nimport { StyledAppContainer } from 'components/App.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const showLoading = isLoading && !error && contacts.length === 0;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <StyledAppContainer>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      {showLoading && <RotatingLines width=\"40\" />}\n    </StyledAppContainer>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","StyledAppContainer","styled","_templateObject","_taggedTemplateLiteral","StyledFormContacts","Form","StyledInput","Field","_templateObject2","StyledFromLabel","_templateObject3","StyledFormButton","_templateObject4","StyledErrorText","_templateObject5","schema","yup","shape","matches","required","number","FormError","_ref","_jsx","ErrorMessage","render","message","children","ContactForm","useSelector","dispatch","useDispatch","Formik","initialValues","onSubmit","_ref2","_ref3","resetForm","some","c","alert","concat","addContact","validationSchema","_jsxs","autoComplete","type","StyledFilterLabel","Filter","title","onChange","e","setFilter","target","value","StyledContactListItem","StyledDeleteButton","ContactListItem","handleDelete","phone","onClick","ContactList","map","deleteContact","id","showLoading","length","useEffect","fetchContacts","RotatingLines","width"],"sourceRoot":""}