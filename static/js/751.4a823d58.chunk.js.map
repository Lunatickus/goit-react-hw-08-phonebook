{"version":3,"file":"static/js/751.4a823d58.chunk.js","mappings":"yOAKMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,WACHC,MAAOL,EAAAA,KAEJK,MAAM,iDACND,WACHE,SAAUN,EAAAA,KAEPO,IAAI,EAAG,2CACPH,aAGCI,EAAY,SAAHC,GAAkB,IAAZP,EAAIO,EAAJP,KACnB,OAAOQ,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAACT,KAAMA,EAAMU,OAAQ,SAAAC,GAAO,OAAIH,EAAAA,EAAAA,KAAA,KAAAI,SAAID,GAAY,GACtE,EAEaE,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,cAAe,CAAEjB,KAAM,GAAIG,MAAO,GAAIC,SAAU,IAChDc,SARiB,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UAC9BP,GAASQ,EAAAA,EAAAA,IAASH,IAClBE,GACF,EAMIE,iBAAkB1B,EAAOe,UAEzBY,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,aAAa,MAAKd,SAAA,EACtBY,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,EACEJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,cACNJ,EAAAA,EAAAA,KAACmB,EAAAA,GAAK,CAACC,KAAK,OAAO5B,KAAK,UACxBQ,EAAAA,EAAAA,KAACF,EAAS,CAACN,KAAK,aAGlBwB,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,EACEJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,WACNJ,EAAAA,EAAAA,KAACmB,EAAAA,GAAK,CAACC,KAAK,QAAQ5B,KAAK,WACzBQ,EAAAA,EAAAA,KAACF,EAAS,CAACN,KAAK,cAGlBwB,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,EACEJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,cACNJ,EAAAA,EAAAA,KAACmB,EAAAA,GAAK,CAACC,KAAK,WAAW5B,KAAK,cAC5BQ,EAAAA,EAAAA,KAACF,EAAS,CAACN,KAAK,iBAGlBQ,EAAAA,EAAAA,KAAA,UAAQoB,KAAK,SAAQhB,SAAC,iBAI9B,E,UClDA,EAXqB,WACnB,OACEY,EAAAA,EAAAA,MAAA,OAAAZ,SAAA,EACEJ,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CAAAjB,UACLJ,EAAAA,EAAAA,KAAA,SAAAI,SAAO,aAETJ,EAAAA,EAAAA,KAACK,EAAY,MAGnB,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  email: yup\n    .string()\n    .email('Enter valid email. For example user@gmail.com')\n    .required(),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters.')\n    .required(),\n});\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <p>{message}</p>} />;\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form autoComplete='off'>\n        <label>\n          <span>Username</span>\n          <Field type=\"text\" name=\"name\" />\n          <FormError name=\"name\" />\n        </label>\n\n        <label>\n          <span>Email</span>\n          <Field type=\"email\" name=\"email\" />\n          <FormError name=\"email\" />\n        </label>\n\n        <label>\n          <span>Password</span>\n          <Field type=\"password\" name=\"password\" />\n          <FormError name=\"password\" />\n        </label>\n\n        <button type=\"submit\">Register</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nconst RegisterPage = () => {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["schema","yup","shape","name","matches","required","email","password","min","FormError","_ref","_jsx","ErrorMessage","render","message","children","RegisterForm","dispatch","useDispatch","Formik","initialValues","onSubmit","values","_ref2","resetForm","register","validationSchema","_jsxs","Form","autoComplete","Field","type","Helmet"],"sourceRoot":""}